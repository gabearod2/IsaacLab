--- git status ---
On branch rl_deployment
Your branch is up to date with 'origin/rl_deployment'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	new file:   source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/navigation/config/unitree_go2/navigation_env_cfg_go2_rough.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   source/extensions/omni.isaac.lab/omni/isaac/lab/envs/mdp/observations.py
	modified:   source/extensions/omni.isaac.lab/omni/isaac/lab/terrains/config/rough_OSHA.py
	modified:   source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/flat_env_cfg.py
	modified:   source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/rough_env_cfg_OSHA.py
	modified:   source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/mdp/rewards.py
	modified:   source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg.py
	modified:   source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg_OSHA.py
	modified:   source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/navigation/config/unitree_go2/navigation_env_cfg_go2_rough.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	logs/rsl_rl/unitree_go2_flat/2024-07-19_10-34-07/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_10-46-24/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_11-10-26/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_11-23-01/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_11-40-05/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_12-15-29/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_12-52-45/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_13-09-19/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_13-34-33/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_13-56-43/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_14-08-29/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_14-17-46/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_14-28-44/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_14-41-39/
	logs/rsl_rl/unitree_go2_flat/2024-07-19_14-54-25/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_12-44-06/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_12-52-31/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_13-01-41/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_13-20-14/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_13-31-14/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_13-42-13/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_14-08-57/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_14-13-18/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_14-26-27/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_14-27-42/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_14-33-01/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_15-03-16/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_15-04-33/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_15-13-25/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_15-47-59/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_16-04-27/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_16-15-59/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_16-53-21/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_17-11-37/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_17-22-23/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_17-35-00/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_17-48-51/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_18-05-26/
	logs/rsl_rl/unitree_go2_flat/2024-07-22_18-11-06/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_11-01-03/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_11-21-24/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_11-37-08/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_11-57-01/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_12-13-43/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_13-32-12/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_15-53-07/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_17-29-36/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_17-44-34/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_18-02-13/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_18-16-14/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_18-24-11/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_18-31-03/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_18-49-09/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_19-02-25/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_19-19-15/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_19-29-10/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_19-35-57/
	logs/rsl_rl/unitree_go2_flat/2024-07-23_19-45-47/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_10-34-25/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_12-00-12/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_12-04-02/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_12-29-19/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_12-43-00/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_15-27-44/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_15-34-22/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_15-46-38/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_16-19-24/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_16-26-35/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_16-27-25/
	logs/rsl_rl/unitree_go2_flat/2024-07-24_18-29-30/
	logs/rsl_rl/unitree_go2_flat/2024-07-25_10-33-33/
	source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/navigation/config/unitree_go2/__init__.py
	source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/navigation/config/unitree_go2/agents/
	source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/navigation/config/unitree_go2/navigation_env_cfg_go2.py
 


--- git diff ---
diff --git a/source/extensions/omni.isaac.lab/omni/isaac/lab/envs/mdp/observations.py b/source/extensions/omni.isaac.lab/omni/isaac/lab/envs/mdp/observations.py
index b344115..c54bb33 100644
--- a/source/extensions/omni.isaac.lab/omni/isaac/lab/envs/mdp/observations.py
+++ b/source/extensions/omni.isaac.lab/omni/isaac/lab/envs/mdp/observations.py
@@ -17,7 +17,7 @@ from typing import TYPE_CHECKING
 import omni.isaac.lab.utils.math as math_utils
 from omni.isaac.lab.assets import Articulation, RigidObject
 from omni.isaac.lab.managers import SceneEntityCfg
-from omni.isaac.lab.sensors import RayCaster
+from omni.isaac.lab.sensors import RayCaster, RayCasterCamera
 
 if TYPE_CHECKING:
     from omni.isaac.lab.envs import ManagerBasedEnv, ManagerBasedRLEnv
@@ -109,8 +109,6 @@ def joint_pos(env: ManagerBasedEnv, asset_cfg: SceneEntityCfg = SceneEntityCfg("
     """
     # extract the used quantities (to enable type-hinting)
     asset: Articulation = env.scene[asset_cfg.name]
-    #print('joint positions')
-    #print(asset.data.joint_pos[:, asset_cfg.joint_ids])
     return asset.data.joint_pos[:, asset_cfg.joint_ids]
 
 
@@ -121,8 +119,6 @@ def joint_pos_rel(env: ManagerBasedEnv, asset_cfg: SceneEntityCfg = SceneEntityC
     """
     # extract the used quantities (to enable type-hinting)
     asset: Articulation = env.scene[asset_cfg.name]
-    #print('default joint pos')
-    #print(asset.data.default_joint_pos)
     return asset.data.joint_pos[:, asset_cfg.joint_ids] - asset.data.default_joint_pos[:, asset_cfg.joint_ids]
 
 
@@ -175,16 +171,13 @@ def height_scan(env: ManagerBasedEnv, sensor_cfg: SceneEntityCfg, offset: float
     """
     # extract the used quantities (to enable type-hinting)
     sensor: RayCaster = env.scene.sensors[sensor_cfg.name]
-    #print(sensor.__str__())
-    #print("In order to understand this observation:")
-    #print(sensor.data.pos_w[:, 2].unsqueeze(1))
-    #print(sensor.data.ray_hits_w[..., 2])
-    #print(sensor.data.pos_w[:, 2].unsqueeze(1) - sensor.data.ray_hits_w[..., 2] - offset)
-    #obs_height_scan = sensor.data.pos_w[:, 2].unsqueeze(1) - sensor.data.ray_hits_w[..., 2] - offset
-    #print("Output Shape: ", obs_height_scan.shape)
-    # height scan: height = sensor_height - hit_point_z - offset
     return sensor.data.pos_w[:, 2].unsqueeze(1) - sensor.data.ray_hits_w[..., 2] - offset
 
+# def depth_scan(env: ManagerBasedEnv, sensor_cfg: SceneEntityCfg) -> torch.Tensor:
+#     """ Depth scan from the given sensor w.r.t. the sensor's frame"""
+#
+#     sensor: RayCaster = env.scene.sensors[sensor_cfg]
+#     return sensor.data.pos_w[:, 0].unsqueeze(1) - sensor.data.ray_hits_w[..., 0]
 
 def body_incoming_wrench(env: ManagerBasedEnv, asset_cfg: SceneEntityCfg) -> torch.Tensor:
     """Incoming spatial wrench on bodies of an articulation in the simulation world frame.
@@ -211,12 +204,8 @@ def last_action(env: ManagerBasedEnv, action_name: str | None = None) -> torch.T
     """
 
     if action_name is None:
-        #print('observations action')
-        #print(env.action_manager.action)
         return env.action_manager.action
     else:
-        #print('observation action')
-        #print(env.action_manager.get_term(action_name).raw_actions)
         return env.action_manager.get_term(action_name).raw_actions
 
 
diff --git a/source/extensions/omni.isaac.lab/omni/isaac/lab/terrains/config/rough_OSHA.py b/source/extensions/omni.isaac.lab/omni/isaac/lab/terrains/config/rough_OSHA.py
index ccb267f..beab7d1 100644
--- a/source/extensions/omni.isaac.lab/omni/isaac/lab/terrains/config/rough_OSHA.py
+++ b/source/extensions/omni.isaac.lab/omni/isaac/lab/terrains/config/rough_OSHA.py
@@ -7,10 +7,11 @@
 
 import omni.isaac.lab.terrains as terrain_gen
 
-from ..terrain_generator_cfg import TerrainGeneratorCfg
+from ..terrain_generator_cfg import TerrainGeneratorCfg, FlatPatchSamplingCfg
 
 """
-Edited to include the optimal training environments for the power plant conditions.
+Edited to include the optimal training environments for the power plant conditions, and finding flat patches for 
+training navigation. 
 - Gabriel Rodriguez
 """
 
@@ -26,12 +27,13 @@ ROUGH_TERRAINS_CFG_OSHA = TerrainGeneratorCfg(
     sub_terrains={
         "flat_terrain": terrain_gen.MeshPlaneTerrainCfg(
             proportion=0.25,
-        ),
-        "rails_terrain": terrain_gen.MeshRailsTerrainCfg(
-            proportion=0.1,
-            rail_thickness_range=(0.1, 0.2),
-            rail_height_range=(0.1, 0.2),
-            platform_width=3.0,
+            flat_patch_sampling={
+                "target": FlatPatchSamplingCfg(
+                    num_patches=1,
+                    patch_radius=4.0,
+                    max_height_diff=0.1,
+                )
+            }
         ),
         "pyramid_open_stairs": terrain_gen.MeshPyramidOpenStairsTerrainCfg(
             proportion=0.25,
@@ -41,6 +43,13 @@ ROUGH_TERRAINS_CFG_OSHA = TerrainGeneratorCfg(
             platform_width=2.0,
             border_width=0.1,
             holes=False,
+            flat_patch_sampling={
+                "target": FlatPatchSamplingCfg(
+                    num_patches=1,
+                    patch_radius=1.0,
+                    max_height_diff=0.1,
+                )
+            }
         ),
         "pyramid_open_stairs_inv": terrain_gen.MeshInvertedPyramidOpenStairsTerrainCfg(
             proportion=0.25,
@@ -50,6 +59,13 @@ ROUGH_TERRAINS_CFG_OSHA = TerrainGeneratorCfg(
             platform_width=2.0,
             border_width=0.1,
             holes=False,
+            flat_patch_sampling={
+                "target": FlatPatchSamplingCfg(
+                    num_patches=1,
+                    patch_radius=1.0,
+                    max_height_diff=0.1,
+                )
+            }
         ),
         "pyramid_stairs": terrain_gen.MeshPyramidStairsTerrainCfg(
             proportion=0.2,
@@ -58,6 +74,13 @@ ROUGH_TERRAINS_CFG_OSHA = TerrainGeneratorCfg(
             platform_width=2.0,
             border_width=0.1,
             holes=False,
+            flat_patch_sampling={
+                "target": FlatPatchSamplingCfg(
+                    num_patches=1,
+                    patch_radius=1.0,
+                    max_height_diff=0.1,
+                )
+            }
         ),
         "pyramid_stairs_inv": terrain_gen.MeshInvertedPyramidStairsTerrainCfg(
             proportion=0.2,
@@ -66,19 +89,54 @@ ROUGH_TERRAINS_CFG_OSHA = TerrainGeneratorCfg(
             platform_width=2.0,
             border_width=0.1,
             holes=False,
+            flat_patch_sampling={
+                "target": FlatPatchSamplingCfg(
+                    num_patches=1,
+                    patch_radius=1.0,
+                    max_height_diff=0.1,
+                )
+            }
         ),
         "boxes": terrain_gen.MeshRandomGridTerrainCfg(
-            proportion=0.2, grid_width=0.45, grid_height_range=(0.05, 0.2), platform_width=2.0
+            proportion=0.2, grid_width=0.45, grid_height_range=(0.05, 0.2), platform_width=2.0,
+            flat_patch_sampling={
+                "target": FlatPatchSamplingCfg(
+                    num_patches=1,
+                    patch_radius=1.0,
+                    max_height_diff=0.1,
+                )
+            }
         ),
         "random_rough": terrain_gen.HfRandomUniformTerrainCfg(
-            proportion=0.2, noise_range=(0.02, 0.10), noise_step=0.02, border_width=0.25
-        ),
-        "hf_pyramid_slope": terrain_gen.HfPyramidSlopedTerrainCfg(
-            proportion=0.2, slope_range=(0.2, 0.3), platform_width=0, border_width=0.1
-        ),
-        "hf_pyramid_slope_inv": terrain_gen.HfInvertedPyramidSlopedTerrainCfg(
-            proportion=0.2, slope_range=(0.2, 0.3), platform_width=0, border_width=0.1
+            proportion=0.2, noise_range=(0.02, 0.10), noise_step=0.02, border_width=0.5,
+            flat_patch_sampling={
+                "target": FlatPatchSamplingCfg(
+                    num_patches=1,
+                    patch_radius=0.25,
+                    max_height_diff=0.1,
+                )
+            }
         ),
+        # "hf_pyramid_slope": terrain_gen.HfPyramidSlopedTerrainCfg(
+        #     proportion=0.2, slope_range=(0.2, 0.3), platform_width=0, border_width=0.1,
+        #     flat_patch_sampling={
+        #         "slope_patches": FlatPatchSamplingCfg(
+        #             num_patches=1,
+        #             patch_radius=4.0,
+        #             max_height_diff=0.1,
+        #         )
+        #     }
+        # ),
+        # "hf_pyramid_slope_inv": terrain_gen.HfInvertedPyramidSlopedTerrainCfg(
+        #     proportion=0.2, slope_range=(0.2, 0.3), platform_width=0, border_width=0.1,
+        #     flat_patch_sampling={
+        #         "slope_inv_patches": FlatPatchSamplingCfg(
+        #             num_patches=1,
+        #             patch_radius=4.0,
+        #             max_height_diff=0.1,
+        #         )
+        #     }
+        # ),
     },
 )
 """Rough terrains configuration."""
\ No newline at end of file
diff --git a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/flat_env_cfg.py b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/flat_env_cfg.py
index ca1efd2..b9534bb 100644
--- a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/flat_env_cfg.py
+++ b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/flat_env_cfg.py
@@ -18,7 +18,9 @@ class UnitreeGo2FlatEnvCfg(UnitreeGo2RoughEnvCfg):
         self.scene.terrain.terrain_generator = None
         # no height scan or base angular velocity
         self.scene.height_scanner = None
+        self.scene.depth_camera = None
         self.observations.policy.height_scan = None
+        self.observations.policy.depth_camera_scan = None
         self.observations.policy.base_lin_vel = None
         # no terrain curriculum
         self.curriculum.terrain_levels = None
@@ -35,5 +37,5 @@ class UnitreeGo2FlatEnvCfg_PLAY(UnitreeGo2FlatEnvCfg):
         # disable randomization for play
         self.observations.policy.enable_corruption = False
         # remove random pushing event
-        # self.events.base_external_force_torque = None
-        # self.events.push_robot = None
+        self.events.base_external_force_torque = None
+        self.events.push_robot = None
diff --git a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/rough_env_cfg_OSHA.py b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/rough_env_cfg_OSHA.py
index 3395df7..870f71e 100644
--- a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/rough_env_cfg_OSHA.py
+++ b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/config/unitree_go2/rough_env_cfg_OSHA.py
@@ -22,35 +22,7 @@ class UnitreeGo2RoughEnvCfg(LocomotionVelocityRoughEnvCfg):
         self.scene.robot = UNITREE_GO2_CFG.replace(prim_path="{ENV_REGEX_NS}/Robot")
         self.scene.height_scanner.prim_path = "{ENV_REGEX_NS}/Robot/base"
 
-        # reduce action scale
-        self.actions.joint_pos.scale = 0.25
-
-        # events - EDIT: adding push robot event to simulate collision
-        self.events.push_robot.params["velocity_range"] = {"x": (-0.75, 0.75), "y": (-0.75, 0.75)}
-        self.events.add_base_mass.params["mass_distribution_params"] = (-1.0, 3.0)
-        self.events.add_base_mass.params["asset_cfg"].body_names = "base"
-        self.events.base_external_force_torque.params["asset_cfg"].body_names = "base"
-        self.events.reset_robot_joints.params["position_range"] = (1.0, 1.0)
-        self.events.reset_base.params = {
-            "pose_range": {"x": (-0.5, 0.5), "y": (-0.5, 0.5), "yaw": (-3.14, 3.14)},
-            "velocity_range": {
-                "x": (0.0, 0.0),
-                "y": (0.0, 0.0),
-                "z": (0.0, 0.0),
-                "roll": (0.0, 0.0),
-                "pitch": (0.0, 0.0),
-                "yaw": (0.0, 0.0),
-            },
-        }
-
-        # rewards
-        self.rewards.feet_air_time.params["sensor_cfg"].body_names = ".*_foot"
-        self.rewards.feet_air_time.weight = 0.01
-        self.rewards.undesired_contacts = None
-        self.rewards.dof_torques_l2.weight = -0.0002
-        self.rewards.track_lin_vel_xy_exp.weight = 1.5
-        self.rewards.track_ang_vel_z_exp.weight = 0.75
-        self.rewards.dof_acc_l2.weight = -2.5e-7
+        self.observations.policy.base_lin_vel = None
 
         # terminations
         self.terminations.base_contact.params["sensor_cfg"].body_names = "base"
diff --git a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/mdp/rewards.py b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/mdp/rewards.py
index f3188ad..e5c27ed 100644
--- a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/mdp/rewards.py
+++ b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/mdp/rewards.py
@@ -278,6 +278,7 @@ def feet_air_time(
 
     If the commands are small (i.e. the agent is not supposed to take a step), then the reward is zero.
     """
+
     # extract the used quantities (to enable type-hinting)
     contact_sensor: ContactSensor = env.scene.sensors[sensor_cfg.name]
     # compute the reward
@@ -285,7 +286,7 @@ def feet_air_time(
     last_air_time = contact_sensor.data.last_air_time[:, sensor_cfg.body_ids]
     reward = torch.sum((last_air_time - threshold) * first_contact, dim=1)
     # no reward for zero command
-    reward *= torch.norm(env.command_manager.get_command(command_name)[:, :2], dim=1) > 0.1
+    reward *= torch.norm(env.command_manager.get_command(command_name)[:, :2], dim=1) > 0.05
     return reward
 
 
diff --git a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg.py b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg.py
index d6f2d6d..3400817 100644
--- a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg.py
+++ b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg.py
@@ -17,7 +17,7 @@ from omni.isaac.lab.managers import RewardTermCfg
 from omni.isaac.lab.managers import SceneEntityCfg
 from omni.isaac.lab.managers import TerminationTermCfg as DoneTerm
 from omni.isaac.lab.scene import InteractiveSceneCfg
-from omni.isaac.lab.sensors import ContactSensorCfg, RayCasterCfg, patterns
+from omni.isaac.lab.sensors import ContactSensorCfg, RayCasterCfg, patterns, RayCasterCameraCfg
 from omni.isaac.lab.terrains import TerrainImporterCfg
 from omni.isaac.lab.utils import configclass
 from omni.isaac.lab.utils.assets import ISAAC_NUCLEUS_DIR, ISAACLAB_NUCLEUS_DIR
@@ -67,10 +67,19 @@ class MySceneCfg(InteractiveSceneCfg):
         prim_path="{ENV_REGEX_NS}/Robot/base",
         offset=RayCasterCfg.OffsetCfg(pos=(0.0, 0.0, 20.0)),
         attach_yaw_only=True,
-        pattern_cfg=patterns.GridPatternCfg(resolution=0.1, size=[1.6, 1.0]),
-        debug_vis=False,
+        pattern_cfg=patterns.GridPatternCfg(resolution=0.1, size=[1.6, 1.0], direction=(0.0, 0.0, -1.0)),
+        debug_vis=True,
         mesh_prim_paths=["/World/ground"],
     )
+    # depth_camera = RayCasterCameraCfg(
+    #     prim_path="{ENV_REGEX_NS}/Robot/base",
+    #     offset=RayCasterCfg.OffsetCfg(pos=(0.0, 0.0, 0.0)),
+    #     attach_yaw_only=True,
+    #     pattern_cfg=patterns.GridPatternCfg(resolution=0.1, size=[1.6, 1.0], direction=(1.0, 0.0, 0.0)),
+    #     debug_vis=True,
+    #     mesh_prim_paths=["/World/ground"],
+    #
+    # )
     contact_forces = ContactSensorCfg(prim_path="{ENV_REGEX_NS}/Robot/.*", history_length=3, track_air_time=True)
     # lights
     sky_light = AssetBaseCfg(
@@ -100,7 +109,7 @@ class CommandsCfg:
         heading_control_stiffness=0.6,
         debug_vis=True,
         ranges=mdp.UniformVelocityCommandCfg.Ranges(
-            lin_vel_x=(-1.5, 1.5), lin_vel_y=(-1.5, 1.5), ang_vel_z=(-1.5, 1.5), heading=(-math.pi, math.pi)
+            lin_vel_x=(-1.0, 1.0), lin_vel_y=(-1.0, 1.0), ang_vel_z=(-1.0, 1.0), heading=(-math.pi, math.pi)
         ),
     )
 
@@ -133,10 +142,16 @@ class ObservationsCfg:
         actions = ObsTerm(func=mdp.last_action)
         height_scan = ObsTerm(
             func=mdp.height_scan,
-            params={"sensor_cfg": SceneEntityCfg("height_scanner")},
+            params={"sensor_cfg": SceneEntityCfg("height_scanner"), "offset": 0.0},
             noise=Unoise(n_min=-0.1, n_max=0.1),
             clip=(-1.0, 1.0),
         )  # Also removed in flat_env_cfg.py
+        # depth_camera_scan = ObsTerm(
+        #     func=mdp.height_scan,
+        #     params={"sensor_cfg": SceneEntityCfg("depth_camera"), "offset": 0.0},
+        #     noise=Unoise(n_min=-0.1, n_max=0.1),
+        #     clip=(-1.0, 1.0),
+        # )  # Also removed in flat_env_cfg.py
 
         def __post_init__(self):
             self.enable_corruption = True
@@ -221,13 +236,14 @@ class EventCfg:
 @configclass
 class RewardsCfg:
     """Reward terms for the MDP."""
-    # FROM SPOT
+
     air_time = RewardTermCfg(
-        func=mdp.feet_air_time,
-        weight=5.0,
+        func=mdp.air_time_reward,
+        weight=1.0,
         params={
-            "threshold": 0.0,
-            "command_name": "base_velocity",
+            "mode_time": 0.1,
+            "velocity_threshold": 0.3,
+            "asset_cfg": SceneEntityCfg("robot"),
             "sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_foot"),
         },
     )
@@ -238,45 +254,45 @@ class RewardsCfg:
     )
     base_linear_velocity = RewardTermCfg(
         func=mdp.base_linear_velocity_reward,
-        weight=5.0,
+        weight=10.0,
         params={"std": 1.0, "ramp_rate": 0.5, "ramp_at_vel": 1.0, "asset_cfg": SceneEntityCfg("robot")},
     )
     foot_clearance = RewardTermCfg(
         func=mdp.foot_clearance_reward,
         weight=5.0,
         params={
-            "std": 0.01,
-            "target_height": 0.10,
+            "std": 0.02,
+            "target_height": 0.08,
             "asset_cfg": SceneEntityCfg("robot", body_names=".*_foot"),
         },
     )
     gait = RewardTermCfg(
         func=mdp.GaitReward,
-        weight=5.0,
+        weight=15.0,
         params={
-            "std": 0.05,
-            "max_err": 0.2,
+            "std": 0.1,
+            "max_err": 0.3,
             "velocity_threshold": 0.0,
             "synced_feet_pair_names": (("FL_foot", "RR_foot"), ("FR_foot", "RL_foot")),
             "asset_cfg": SceneEntityCfg("robot"),
             "sensor_cfg": SceneEntityCfg("contact_forces"),
         },
     )
-    action_smoothness = RewardTermCfg(func=mdp.action_smoothness_penalty, weight=-1.0)
+    action_smoothness = RewardTermCfg(func=mdp.action_smoothness_penalty, weight=-2.0)
     air_time_variance = RewardTermCfg(
         func=mdp.air_time_variance_penalty,
-        weight=-1.0,
+        weight=-2.0,
         params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_foot")},
     )
     base_motion = RewardTermCfg(
-        func=mdp.base_motion_penalty, weight=-2.0, params={"asset_cfg": SceneEntityCfg("robot")}
+        func=mdp.base_motion_penalty, weight=-2.5, params={"asset_cfg": SceneEntityCfg("robot")}
     )
     base_orientation = RewardTermCfg(
         func=mdp.base_orientation_penalty, weight=0.0, params={"asset_cfg": SceneEntityCfg("robot")}
     )
     foot_slip = RewardTermCfg(
         func=mdp.foot_slip_penalty,
-        weight=-1.5,
+        weight=-1.5,  # -2.5
         params={
             "asset_cfg": SceneEntityCfg("robot", body_names=".*_foot"),
             "sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_foot"),
@@ -310,14 +326,13 @@ class RewardsCfg:
     # ADDITIONAL PENALTIES
     base_height_l2 = RewardTermCfg(
         func=mdp.base_height_l2,
-        weight=-1.0,
+        weight=-4.5,
         params={
-            'target_height': 0.20,
+            'target_height': 0.18,
             "asset_cfg": SceneEntityCfg("robot", body_names="base")
         },
     )
-    flat_orientation_l2 = RewardTermCfg(func=mdp.flat_orientation_l2, weight=-2.5)
-    action_rate_l2 = RewardTermCfg(func=mdp.action_rate_l2, weight=-0.0)
+    flat_orientation_l2 = RewardTermCfg(func=mdp.flat_orientation_l2, weight=-3.0)
     undesired_contact_thigh = RewardTermCfg(
         func=mdp.undesired_contacts,
         weight=-2.0,
@@ -328,17 +343,17 @@ class RewardsCfg:
         weight=-2.0,
         params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_calf"), "threshold": 1.0},
     )
-    # -- FOR NO ERRORS --
+    action_rate_l2 = RewardTermCfg(func=mdp.action_rate_l2, weight=-0.0)
+    dof_torques_l2 = RewardTermCfg(func=mdp.joint_torques_l2, weight=0.0)
     feet_air_time = RewardTermCfg(
         func=mdp.feet_air_time,
         weight=0.0,
         params={
-            "sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_foot"),
+            "threshold": 0.08,
             "command_name": "base_velocity",
-            "threshold": 0.5,
+            "sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_foot"),
         },
     )
-    dof_torques_l2 = RewardTermCfg(func=mdp.joint_torques_l2, weight=0.0)
 
 
 @configclass
@@ -350,6 +365,10 @@ class TerminationsCfg:
         func=mdp.illegal_contact,
         params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names="base"), "threshold": 0.1},
     )
+    head_contact = DoneTerm(
+        func=mdp.illegal_contact,
+        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names="Head_lower"), "threshold": 0.1}
+    )
 
 
 
@@ -394,6 +413,8 @@ class LocomotionVelocityRoughEnvCfg(ManagerBasedRLEnvCfg):
         # we tick all the sensors based on the smallest update period (physics update period)
         if self.scene.height_scanner is not None:
             self.scene.height_scanner.update_period = self.decimation * self.sim.dt
+        # if self.scene.depth_camera is not None:
+        #     self.scene.depth_camera.update_period = self.decimation * self.sim.dt
         if self.scene.contact_forces is not None:
             self.scene.contact_forces.update_period = self.sim.dt
 
diff --git a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg_OSHA.py b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg_OSHA.py
index f591550..7139fbd 100644
--- a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg_OSHA.py
+++ b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/locomotion/velocity/velocity_env_cfg_OSHA.py
@@ -13,11 +13,11 @@ from omni.isaac.lab.managers import CurriculumTermCfg as CurrTerm
 from omni.isaac.lab.managers import EventTermCfg as EventTerm
 from omni.isaac.lab.managers import ObservationGroupCfg as ObsGroup
 from omni.isaac.lab.managers import ObservationTermCfg as ObsTerm
-from omni.isaac.lab.managers import RewardTermCfg as RewTerm
+from omni.isaac.lab.managers import RewardTermCfg
 from omni.isaac.lab.managers import SceneEntityCfg
 from omni.isaac.lab.managers import TerminationTermCfg as DoneTerm
 from omni.isaac.lab.scene import InteractiveSceneCfg
-from omni.isaac.lab.sensors import ContactSensorCfg, RayCasterCfg, patterns
+from omni.isaac.lab.sensors import ContactSensorCfg, RayCasterCfg, patterns, RayCasterCameraCfg
 from omni.isaac.lab.terrains import TerrainImporterCfg
 from omni.isaac.lab.utils import configclass
 from omni.isaac.lab.utils.assets import ISAAC_NUCLEUS_DIR, ISAACLAB_NUCLEUS_DIR
@@ -28,7 +28,7 @@ import omni.isaac.lab_tasks.manager_based.locomotion.velocity.mdp as mdp
 ##
 # Pre-defined configs
 ##
-from omni.isaac.lab.terrains.config.rough_OSHA import ROUGH_TERRAINS_CFG_OSHA  # isort: skip
+from omni.isaac.lab.terrains.config.rough import ROUGH_TERRAINS_CFG  # isort: skip
 
 
 ##
@@ -44,7 +44,7 @@ class MySceneCfg(InteractiveSceneCfg):
     terrain = TerrainImporterCfg(
         prim_path="/World/ground",
         terrain_type="generator",
-        terrain_generator=ROUGH_TERRAINS_CFG_OSHA,
+        terrain_generator=ROUGH_TERRAINS_CFG,
         max_init_terrain_level=5,
         collision_group=-1,
         physics_material=sim_utils.RigidBodyMaterialCfg(
@@ -62,18 +62,24 @@ class MySceneCfg(InteractiveSceneCfg):
     )
     # robots
     robot: ArticulationCfg = MISSING
-    # sensors - need to edit the ray caster to represent the one on the dog.
+    # sensors
     height_scanner = RayCasterCfg(
-        prim_path="{ENV_REGEX_NS}/Robot/base/radar_joint",
-        offset=RayCasterCfg.OffsetCfg(pos=(0.0, 0.0, 0.0), rot=(1.0, 0.0, 0.0, 0.0)),
-        #offset=RayCasterCfg.OffsetCfg(pos=(0.28945, 0.0, -0.0468250), rot=(0.131316, 0, 0.9913406, 0)),
+        prim_path="{ENV_REGEX_NS}/Robot/base",
+        offset=RayCasterCfg.OffsetCfg(pos=(0.28945, 0.0, -0.046825), rot=(0.131316, 0.0, 0.9913406, 0.0)),
         attach_yaw_only=True,
-        pattern_cfg=patterns.GridPatternCfg(resolution=0.1, size=[1.6, 1.0]),
-        #pattern_cfg=patterns.GridPatternCfg(resolution=0.06, size=[128*0.06, 128*0.06]),
+        pattern_cfg=patterns.GridPatternCfg(resolution=0.1, size=[1.6, 1.0], direction=(0.0, 0.0, -1.0)),
         debug_vis=True,
-        drift_range=(0.0, 0.1),
         mesh_prim_paths=["/World/ground"],
     )
+    # depth_camera = RayCasterCameraCfg(
+    #     prim_path="{ENV_REGEX_NS}/Robot/base",
+    #     offset=RayCasterCfg.OffsetCfg(pos=(0.28945, 0.0, 0.0725), rot=(1.0, 0.0, 0.0, 0.0)), # convention="world"),
+    #     attach_yaw_only=True,
+    #     pattern_cfg=patterns.GridPatternCfg(resolution=0.1, size=[1.6, 1.0], direction=(1.0, 0.0, 0.0)),
+    #     debug_vis=True,
+    #     mesh_prim_paths=["/World/ground"],
+    #
+    # )
     contact_forces = ContactSensorCfg(prim_path="{ENV_REGEX_NS}/Robot/.*", history_length=3, track_air_time=True)
     # lights
     sky_light = AssetBaseCfg(
@@ -100,7 +106,7 @@ class CommandsCfg:
         rel_standing_envs=0.02,
         rel_heading_envs=1.0,
         heading_command=True,
-        heading_control_stiffness=0.5,
+        heading_control_stiffness=0.6,
         debug_vis=True,
         ranges=mdp.UniformVelocityCommandCfg.Ranges(
             lin_vel_x=(-1.0, 1.0), lin_vel_y=(-1.0, 1.0), ang_vel_z=(-1.0, 1.0), heading=(-math.pi, math.pi)
@@ -112,7 +118,7 @@ class CommandsCfg:
 class ActionsCfg:
     """Action specifications for the MDP."""
 
-    joint_pos = mdp.JointPositionActionCfg(asset_name="robot", joint_names=[".*"], scale=0.5, use_default_offset=True)
+    joint_pos = mdp.JointPositionActionCfg(asset_name="robot", joint_names=[".*"], scale=0.25, use_default_offset=True)
 
 
 @configclass
@@ -125,7 +131,7 @@ class ObservationsCfg:
 
         # observation terms (order preserved)
         base_lin_vel = ObsTerm(func=mdp.base_lin_vel, noise=Unoise(n_min=-0.1, n_max=0.1))
-        base_ang_vel = ObsTerm(func=mdp.base_ang_vel, noise=Unoise(n_min=-0.2, n_max=0.2))
+        base_ang_vel = ObsTerm(func=mdp.base_ang_vel, noise=Unoise(n_min=-0.2, n_max=0.2))  # Removed in flat_env_cfg.py
         projected_gravity = ObsTerm(
             func=mdp.projected_gravity,
             noise=Unoise(n_min=-0.05, n_max=0.05),
@@ -139,7 +145,14 @@ class ObservationsCfg:
             params={"sensor_cfg": SceneEntityCfg("height_scanner")},
             noise=Unoise(n_min=-0.1, n_max=0.1),
             clip=(-1.0, 1.0),
-        )
+        )  # Also removed in flat_env_cfg.py
+        # depth_camera_scan = ObsTerm(
+        #     func=mdp.height_scan,
+        #     params={"sensor_cfg": SceneEntityCfg("depth_camera")},
+        #     noise=Unoise(n_min=-0.1, n_max=0.1),
+        #     clip=(-1.0, 1.0),
+        # )  # Also removed in flat_env_cfg.py
+
         def __post_init__(self):
             self.enable_corruption = True
             self.concatenate_terms = True
@@ -170,7 +183,7 @@ class EventCfg:
         mode="startup",
         params={
             "asset_cfg": SceneEntityCfg("robot", body_names="base"),
-            "mass_distribution_params": (-5.0, 5.0),
+            "mass_distribution_params": (-1.0, 3.0),
             "operation": "add",
         },
     )
@@ -181,7 +194,7 @@ class EventCfg:
         mode="reset",
         params={
             "asset_cfg": SceneEntityCfg("robot", body_names="base"),
-            "force_range": (0.0, 0.0),
+            "force_range": (-0.0, 0.0),
             "torque_range": (-0.0, 0.0),
         },
     )
@@ -192,12 +205,12 @@ class EventCfg:
         params={
             "pose_range": {"x": (-0.5, 0.5), "y": (-0.5, 0.5), "yaw": (-3.14, 3.14)},
             "velocity_range": {
-                "x": (-0.5, 0.5),
-                "y": (-0.5, 0.5),
-                "z": (-0.5, 0.5),
-                "roll": (-0.5, 0.5),
-                "pitch": (-0.5, 0.5),
-                "yaw": (-0.5, 0.5),
+                "x": (-0.0, 0.0),
+                "y": (-0.0, 0.0),
+                "z": (-0.0, 0.0),
+                "roll": (-0.0, 0.0),
+                "pitch": (-0.0, 0.0),
+                "yaw": (-0.0, 0.0),
             },
         },
     )
@@ -206,7 +219,7 @@ class EventCfg:
         func=mdp.reset_joints_by_scale,
         mode="reset",
         params={
-            "position_range": (0.5, 1.5),
+            "position_range": (0.8, 1.2),
             "velocity_range": (0.0, 0.0),
         },
     )
@@ -223,37 +236,119 @@ class EventCfg:
 @configclass
 class RewardsCfg:
     """Reward terms for the MDP."""
-
-    # -- task
-    track_lin_vel_xy_exp = RewTerm(
-        func=mdp.track_lin_vel_xy_exp, weight=1.0, params={"command_name": "base_velocity", "std": math.sqrt(0.25)}
-    )
-    track_ang_vel_z_exp = RewTerm(
-        func=mdp.track_ang_vel_z_exp, weight=0.5, params={"command_name": "base_velocity", "std": math.sqrt(0.25)}
-    )
-    # -- penalties
-    lin_vel_z_l2 = RewTerm(func=mdp.lin_vel_z_l2, weight=-2.0)
-    ang_vel_xy_l2 = RewTerm(func=mdp.ang_vel_xy_l2, weight=-0.05)
-    dof_torques_l2 = RewTerm(func=mdp.joint_torques_l2, weight=-1.0e-5)
-    dof_acc_l2 = RewTerm(func=mdp.joint_acc_l2, weight=-2.5e-7)
-    action_rate_l2 = RewTerm(func=mdp.action_rate_l2, weight=-0.01)
-    feet_air_time = RewTerm(
+    # FROM SPOT
+    feet_air_time = RewardTermCfg(
         func=mdp.feet_air_time,
-        weight=0.125,
+        weight=8.5,  # 7.5
         params={
-            "sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*FOOT"),
+            "threshold": 0.08,
             "command_name": "base_velocity",
-            "threshold": 0.5,
+            "sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_foot"),
+        },
+    )
+    base_angular_velocity = RewardTermCfg(
+        func=mdp.base_angular_velocity_reward,
+        weight=5.0,
+        params={"std": 2.0, "asset_cfg": SceneEntityCfg("robot")},
+    )
+    base_linear_velocity = RewardTermCfg(
+        func=mdp.base_linear_velocity_reward,
+        weight=6.0,
+        params={"std": 1.0, "ramp_rate": 0.5, "ramp_at_vel": 1.0, "asset_cfg": SceneEntityCfg("robot")},
+    )
+    foot_clearance = RewardTermCfg(
+        func=mdp.foot_clearance_reward,
+        weight=7.0,
+        params={
+            "std": 0.02,
+            "target_height": 0.13,
+            "asset_cfg": SceneEntityCfg("robot", body_names=".*_foot"),
         },
     )
-    undesired_contacts = RewTerm(
+    gait = RewardTermCfg(
+        func=mdp.GaitReward,
+        weight=10.0,
+        params={
+            "std": 0.03,
+            "max_err": 0.3,
+            "velocity_threshold": 0.0,
+            "synced_feet_pair_names": (("FL_foot", "RR_foot"), ("FR_foot", "RL_foot")),
+            "asset_cfg": SceneEntityCfg("robot"),
+            "sensor_cfg": SceneEntityCfg("contact_forces"),
+        },
+    )
+    action_smoothness = RewardTermCfg(func=mdp.action_smoothness_penalty, weight=-1.0)
+    air_time_variance = RewardTermCfg(
+        func=mdp.air_time_variance_penalty,
+        weight=-2.0,
+        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_foot")},
+    )
+    base_motion = RewardTermCfg(
+        func=mdp.base_motion_penalty, weight=-2.0, params={"asset_cfg": SceneEntityCfg("robot")}
+    )
+    base_orientation = RewardTermCfg(
+        func=mdp.base_orientation_penalty, weight=0.0, params={"asset_cfg": SceneEntityCfg("robot")}
+    )
+    foot_slip = RewardTermCfg(
+        func=mdp.foot_slip_penalty,
+        weight=-1.5,  # -2.5
+        params={
+            "asset_cfg": SceneEntityCfg("robot", body_names=".*_foot"),
+            "sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_foot"),
+            "threshold": 1.0,
+        },
+    )
+    joint_acc = RewardTermCfg(
+        func=mdp.joint_acceleration_penalty,
+        weight=-1.0e-4,
+        params={"asset_cfg": SceneEntityCfg("robot", joint_names=".*")},
+    )
+    joint_pos = RewardTermCfg(
+        func=mdp.joint_position_penalty,
+        weight=-0.3,
+        params={
+            "asset_cfg": SceneEntityCfg("robot", joint_names=".*"),
+            "stand_still_scale": 5.0,
+            "velocity_threshold": 0.0,
+        },
+    )
+    joint_torques = RewardTermCfg(
+        func=mdp.joint_torques_penalty,
+        weight=-5.0e-4,
+        params={"asset_cfg": SceneEntityCfg("robot", joint_names=".*")},
+    )
+    joint_vel = RewardTermCfg(
+        func=mdp.joint_velocity_penalty,
+        weight=-1.0e-2,
+        params={"asset_cfg": SceneEntityCfg("robot", joint_names=".*")},
+    )
+    # ADDITIONAL PENALTIES
+    base_height_l2 = RewardTermCfg(
+        func=mdp.base_height_l2,
+        weight=-2.5,
+        params={
+            'target_height': 0.18,
+            "asset_cfg": SceneEntityCfg("robot", body_names="base")
+        },
+    )
+    flat_orientation_l2 = RewardTermCfg(func=mdp.flat_orientation_l2, weight=0.0)
+    action_rate_l2 = RewardTermCfg(func=mdp.action_rate_l2, weight=0.0)
+    undesired_contact_thigh = RewardTermCfg(
+        func=mdp.undesired_contacts,
+        weight=-2.0,
+        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_thigh"), "threshold": 1.0},
+    )
+    undesired_contacts_calf = RewardTermCfg(
+        func=mdp.undesired_contacts,
+        weight=-2.0,
+        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*_calf"), "threshold": 1.0},
+    )
+    undesired_contacts_base = RewardTermCfg(
         func=mdp.undesired_contacts,
-        weight=-1.0,
-        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names=".*THIGH"), "threshold": 1.0},
+        weight=-2.0,
+        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names="base"), "threshold": 1.0},
     )
-    # -- optional penalties
-    flat_orientation_l2 = RewTerm(func=mdp.flat_orientation_l2, weight=0.0)
-    dof_pos_limits = RewTerm(func=mdp.joint_pos_limits, weight=0.0)
+    dof_torques_l2 = RewardTermCfg(func=mdp.joint_torques_l2, weight=0.0)
 
 
 @configclass
@@ -262,11 +357,12 @@ class TerminationsCfg:
 
     time_out = DoneTerm(func=mdp.time_out, time_out=True)
     base_contact = DoneTerm(
-        func=mdp.illegal_contact,
-        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names="base"), "threshold": 1.0},
+        func=mdp.bad_orientation,
+        params={"asset_cfg": SceneEntityCfg("robot", body_names="base"), "limit_angle": math.pi/2},
     )
 
 
+
 @configclass
 class CurriculumCfg:
     """Curriculum terms for the MDP."""
@@ -308,6 +404,8 @@ class LocomotionVelocityRoughEnvCfg(ManagerBasedRLEnvCfg):
         # we tick all the sensors based on the smallest update period (physics update period)
         if self.scene.height_scanner is not None:
             self.scene.height_scanner.update_period = self.decimation * self.sim.dt
+        # if self.scene.depth_camera is not None:
+        #     self.scene.depth_camera.update_period = self.decimation * self.sim.dt
         if self.scene.contact_forces is not None:
             self.scene.contact_forces.update_period = self.sim.dt
 
diff --git a/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/navigation/config/unitree_go2/navigation_env_cfg_go2_rough.py b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/navigation/config/unitree_go2/navigation_env_cfg_go2_rough.py
new file mode 100644
index 0000000..7ec79a9
--- /dev/null
+++ b/source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/navigation/config/unitree_go2/navigation_env_cfg_go2_rough.py
@@ -0,0 +1,166 @@
+# Copyright (c) 2022-2024, The Isaac Lab Project Developers.
+# All rights reserved.
+#
+# SPDX-License-Identifier: BSD-3-Clause
+
+import math
+
+from omni.isaac.lab.envs import ManagerBasedRLEnvCfg
+from omni.isaac.lab.managers import ObservationGroupCfg as ObsGroup
+from omni.isaac.lab.managers import ObservationTermCfg as ObsTerm
+from omni.isaac.lab.managers import RandomizationTermCfg as RandTerm
+from omni.isaac.lab.managers import RewardTermCfg as RewTerm
+from omni.isaac.lab.managers import SceneEntityCfg
+from omni.isaac.lab.managers import TerminationTermCfg as DoneTerm
+from omni.isaac.lab.utils import configclass
+from omni.isaac.lab.utils.assets import ISAACLAB_NUCLEUS_DIR
+
+import omni.isaac.lab_tasks.manager_based.navigation.mdp as mdp
+from omni.isaac.lab_tasks.manager_based.locomotion.velocity.config.unitree_go2.rough_env_cfg import UnitreeGo2RoughEnvCfg
+
+LOW_LEVEL_ENV_CFG = UnitreeGo2RoughEnvCfg()
+
+
+@configclass
+class EventCfg:
+    """Configuration for events."""
+
+    reset_base = RandTerm(
+        func=mdp.reset_root_state_uniform,
+        mode="reset",
+        params={
+            "pose_range": {"x": (-0.5, 0.5), "y": (-0.5, 0.5), "yaw": (-3.14, 3.14)},
+            "velocity_range": {
+                "x": (-0.0, 0.0),
+                "y": (-0.0, 0.0),
+                "z": (-0.0, 0.0),
+                "roll": (-0.0, 0.0),
+                "pitch": (-0.0, 0.0),
+                "yaw": (-0.0, 0.0),
+            },
+        },
+    )
+
+
+@configclass
+class ActionsCfg:
+    """Action terms for the MDP."""
+
+    pre_trained_policy_action: mdp.PreTrainedPolicyActionCfg = mdp.PreTrainedPolicyActionCfg(
+        asset_name="robot",
+        policy_path="/policy.pt",
+        low_level_decimation=4,
+        low_level_actions=LOW_LEVEL_ENV_CFG.actions.joint_pos,
+        low_level_observations=LOW_LEVEL_ENV_CFG.observations.policy,
+    )
+
+
+@configclass
+class ObservationsCfg:
+    """Observation specifications for the MDP."""
+
+    @configclass
+    class PolicyCfg(ObsGroup):
+        """Observations for policy group."""
+
+        # observation terms (order preserved)
+        base_lin_vel = ObsTerm(func=mdp.base_lin_vel)
+        projected_gravity = ObsTerm(func=mdp.projected_gravity)
+        pose_command = ObsTerm(func=mdp.generated_commands, params={"command_name": "pose_command"})
+
+    # observation groups
+    policy: PolicyCfg = PolicyCfg()
+
+
+@configclass
+class RewardsCfg:
+    """Reward terms for the MDP."""
+
+    termination_penalty = RewTerm(func=mdp.is_terminated, weight=-400.0)
+    position_tracking = RewTerm(
+        func=mdp.position_command_error_tanh,
+        weight=0.5,
+        params={"std": 2.0, "command_name": "pose_command"},
+    )
+    position_tracking_fine_grained = RewTerm(
+        func=mdp.position_command_error_tanh,
+        weight=0.5,
+        params={"std": 0.2, "command_name": "pose_command"},
+    )
+    orientation_tracking = RewTerm(
+        func=mdp.heading_command_error_abs,
+        weight=-0.2,
+        params={"command_name": "pose_command"},
+    )
+
+
+@configclass
+class CommandsCfg:
+    """Command terms for the MDP."""
+
+    pose_command = mdp.TerrainBasedPose2dCommandCfg(
+        asset_name="robot",
+        simple_heading=False,
+        resampling_time_range=(8.0, 8.0),
+        debug_vis=True,
+        ranges=mdp.TerrainBasedPose2dCommandCfg.Ranges(
+            heading=(-math.pi, math.pi)
+        )
+    )
+
+
+@configclass
+class CurriculumCfg:
+    """Curriculum terms for the MDP."""
+
+    pass
+
+
+@configclass
+class TerminationsCfg:
+    """Termination terms for the MDP."""
+
+    time_out = DoneTerm(func=mdp.time_out, time_out=True)
+    base_contact = DoneTerm(
+        func=mdp.illegal_contact,
+        params={"sensor_cfg": SceneEntityCfg("contact_forces", body_names="base"), "threshold": 1.0},
+    )
+
+
+@configclass
+class NavigationEnvCfg(ManagerBasedRLEnvCfg):
+    scene: SceneEntityCfg = LOW_LEVEL_ENV_CFG.scene
+    commands: CommandsCfg = CommandsCfg()
+    actions: ActionsCfg = ActionsCfg()
+    observations: ObservationsCfg = ObservationsCfg()
+    rewards: RewardsCfg = RewardsCfg()
+    events: EventCfg = EventCfg()
+
+    curriculum: CurriculumCfg = CurriculumCfg()
+    terminations: TerminationsCfg = TerminationsCfg()
+
+    def __post_init__(self):
+        """Post initialization."""
+
+        self.sim.dt = LOW_LEVEL_ENV_CFG.sim.dt
+        self.decimation = LOW_LEVEL_ENV_CFG.decimation * 10
+        self.episode_length_s = self.commands.pose_command.resampling_time_range[1]
+
+        if self.scene.height_scanner is not None:
+            self.scene.height_scanner.update_period = (
+                self.actions.pre_trained_policy_action.low_level_decimation * self.sim.dt
+            )
+        if self.scene.contact_forces is not None:
+            self.scene.contact_forces.update_period = self.sim.dt
+
+
+class NavigationEnvCfg_PLAY(NavigationEnvCfg):
+    def __post_init__(self) -> None:
+        # post init of parent
+        super().__post_init__()
+
+        # make a smaller scene for play
+        self.scene.num_envs = 50
+        self.scene.env_spacing = 2.5
+        # disable randomization for play
+        self.observations.policy.enable_corruption = False